{"version":3,"sources":["components/Header.tsx","components/Square.tsx","components/Controls.tsx","lib/solve.ts","lib/animate.ts","components/BoardAndControls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","Square","value","setBoardEntry","coordinates","rowNr","colNr","id","type","maxLength","onChange","t","currentTarget","replace","Controls","clearBoard","setImportedBoard","solveSudoku","onClick","htmlFor","style","visibility","display","e","target","files","reader","FileReader","onloadend","importedBoard","pipe","split","map","row","splitEvery","col","ifElse","equals","identity","filter","take","result","readAsText","handleFile","solvedBoard","nextUnassignedLocation","strValue","toString","isSafe","R","usedInRow","usedInColumn","startRow","startCol","usedInBox","squaresInZigZagOrder","CSSPlugin","getAllSquaresInOrder","row_inc","len","i","push","elementAt","diag","document","getElementById","emptyBoard","mapWithIndex","addIndex","Board","useState","board","setBoard","errorMessage","setErrorMessage","useEffect","j","tl","TimelineMax","layerSquares","square","fromTo","opacity","x","y","ease","Power2","easeInOut","animate","key","entry","newBoard","clone","emptyEntries","m","n","isValid","solve","querySelectorAll","forEach","element","classList","add","setTimeout","remove","App","BoardAndControls","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2111b2e3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/Header.css\";\n\nconst Header = () => {\n  return (\n    <div className=\"headerContainer\">\n      <h1 className=\"header\">Sudoku Solver</h1>\n      <p className=\"description\">\n        Welcome! Ready to solve some sudoku? Enter any digit you want in the\n        board below and then press solve and enjoy the show! You can use the\n        clear button to empty the board and the import button to use a text file\n        for entering values. The text file must look like\n        <span className=\"tooltip\">\n          <span className=\"tooltip--text\"> this</span>\n          <span className=\"tooltip--dropdown\">\n            1 2 3&nbsp; 4 5 6&nbsp; 7 0 9 <br />\n            4 0 6&nbsp; 7 8 9&nbsp; 1 2 3 <br />\n            7 8 9&nbsp; 1 2 3&nbsp; 0 5 6 <br />\n            <span className=\"br\"></span>\n            2 1 4&nbsp; 3 6 5&nbsp; 0 9 7 <br />\n            3 6 5&nbsp; 8 0 7&nbsp; 2 1 4 <br />\n            8 0 7&nbsp; 2 1 4&nbsp; 3 6 5 <br />\n            <span className=\"br\"></span>\n            5 0 1&nbsp; 6 4 2&nbsp; 9 7 8 <br />\n            6 4 2&nbsp; 0 7 8&nbsp; 5 0 1 <br />\n            0 7 8&nbsp; 5 3 1&nbsp; 0 4 2 <br />\n          </span>\n        </span>\n        , otherwise the app will crash! Use 0 if you want the square to be\n        empty.\n      </p>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"../css/Square.css\";\n\ntype Digit = \"\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\";\n\ninterface Coordinates {\n  rowNr: number,\n  colNr: number\n}\n\ninterface Props {\n  setBoardEntry: Function;\n  value: Digit;\n  coordinates: Coordinates\n}\n\nconst Square: React.FC<Props> = ({ value, setBoardEntry, coordinates }) => {\n  const {rowNr, colNr} = coordinates;\n  return (\n    <input\n      id={`square-${rowNr}-${colNr}`}\n      className={`square ${colNr % 3 === 2 ? \"m-right\" : (rowNr % 3 === 2 ? \"m-bottom\" : '')}`}\n      type=\"text\"\n      maxLength={1}\n      value={value}\n      onChange={t =>\n        setBoardEntry(t.currentTarget.value.replace(/[^1-9]/g, \"\"))\n      }\n    />\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport {\n  pipe,\n  split,\n  map,\n  splitEvery,\n  identity,\n  take,\n  ifElse,\n  equals,\n  filter\n} from \"ramda\";\nimport \"../css/Controls.css\";\n\ninterface Props {\n  clearBoard: () => void;\n  setImportedBoard: (board: string[][]) => void;\n  solveSudoku: () => void;\n}\n\nconst Controls: React.FC<Props> = ({\n  clearBoard,\n  setImportedBoard,\n  solveSudoku\n}) => {\n  const handleFile = e => {\n    if (e.target.files[0]) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const importedBoard = pipe(\n          split(\"\\n\"),\n          map((row: string) => splitEvery(1)(row.replace(/[ ]/g, \"\"))),\n          map((row: string[]) =>\n            map((col: string) => ifElse(equals(\"0\"), () => \"\", identity)(col))(\n              row\n            )\n          ),\n          filter((row: string[]) => !equals([], row)),\n          take(9)\n        )(reader.result);\n        setImportedBoard(importedBoard);\n      };\n      reader.readAsText(e.target.files[0]);\n      e.target.value = \"\";\n    }\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button onClick={clearBoard}>Clear</button>\n      <div className=\"fileInput\">\n        <label htmlFor=\"file\">Import</label>\n        <input\n          id=\"file\"\n          type=\"file\"\n          style={{ visibility: \"hidden\", display: \"none\" }}\n          onChange={e => handleFile(e)}\n        />\n      </div>\n      <button onClick={solveSudoku}>Solve</button>\n    </div>\n  );\n};\n\nexport default Controls;\n","import * as R from \"ramda\";\n\ninterface Coordinates {\n  row: number;\n  col: number;\n}\n\nexport const solve = (board: string[][]): string[][] => {\n  const solvedBoard = R.clone(board);\n  if (solveSudoku(solvedBoard)) return solvedBoard;\n  return [[]];\n};\n\nconst solveSudoku = (solvedBoard: string[][]): boolean => {\n  const coordinates: Coordinates = { row: 0, col: 0 };\n  if (!nextUnassignedLocation(solvedBoard, coordinates)) return true;\n\n  for (let value = 1; value <= 9; value++) {\n    const strValue = value.toString();\n    if (isSafe(solvedBoard, coordinates.row, coordinates.col, strValue)) {\n      solvedBoard[coordinates.row][coordinates.col] = strValue;\n      if (solveSudoku(solvedBoard)) return true;\n      solvedBoard[coordinates.row][coordinates.col] = \"\";\n    }\n  }\n  return false;\n};\n\nconst nextUnassignedLocation = (\n  solvedBoard: string[][],\n  coordinates: Coordinates\n): boolean => {\n  for (coordinates.row = 0; coordinates.row < 9; coordinates.row++)\n    for (coordinates.col = 0; coordinates.col < 9; coordinates.col++)\n      if (R.equals(solvedBoard[coordinates.row][coordinates.col], \"\"))\n        return true;\n\n  return false;\n};\n\nconst usedInRow = (\n  solvedBoard: string[][],\n  row: number,\n  value: string\n): boolean => {\n  for (let col = 0; col < 9; col++)\n    if (R.equals(solvedBoard[row][col], value)) return true;\n\n  return false;\n};\n\nconst usedInColumn = (\n  solvedBoard: string[][],\n  col: number,\n  value: string\n): boolean => {\n  for (let row = 0; row < 9; row++)\n    if (R.equals(solvedBoard[row][col], value)) return true;\n\n  return false;\n};\n\nconst usedInBox = (\n  solvedBoard: string[][],\n  startRow: number,\n  startCol: number,\n  value: string\n): boolean => {\n  for (let row = 0; row < 3; row++)\n    for (let col = 0; col < 3; col++)\n      if (R.equals(solvedBoard[row + startRow][col + startCol], value))\n        return true;\n\n  return false;\n};\n\nconst isSafe = (\n  solvedBoard: string[][],\n  row: number,\n  col: number,\n  value: string\n): boolean => {\n  return (\n    !usedInRow(solvedBoard, row, value) &&\n    !usedInColumn(solvedBoard, col, value) &&\n    !usedInBox(solvedBoard, row - (row % 3), col - (col % 3), value)\n  );\n};\n\nexport const isValid = (board: string[][]): number => {\n  // Check if board is already full\n  let emptyEntries = 0;\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (R.equals(board[i][j], \"\")) {\n        emptyEntries++;\n      }\n    }\n  }\n  if (emptyEntries === 0) return 1;\n\n  // Check if a value is used more than once per row/col/box\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (!R.equals(board[i][j], \"\")) {\n        // Check in Column\n        for (let m = 0; m < 9; m++)\n          if (m !== j && board[i][m] === board[i][j]) return 2;\n\n        // Check in Row\n        for (let m = 0; m < 9; m++)\n          if (m !== i && board[m][j] === board[i][j]) return 2;\n\n        // Check for Box\n        const startRow = i - (i % 3);\n        const startCol = j - (j % 3);\n        for (let m = 0; m < 3; m++)\n          for (let n = 0; n < 3; n++) {\n            const row = startRow + m;\n            const col = startCol + n;\n            if (row !== i && col !== j && board[row][col] === board[i][j])\n              return 2;\n          }\n      }\n    }\n  }\n  return 0;\n};\n","import { TimelineMax, CSSPlugin, Power2 } from \"gsap\";\nimport * as R from \"ramda\";\n\nconst plugins = [CSSPlugin];\n\nlet squaresInZigZagOrder: HTMLInputElement[] = [];\n\nexport default () => {\n  getAllSquaresInOrder();\n\n  const tl = new TimelineMax();\n  let i: number, j: boolean;\n  for (i = 1, j = false; j ? i > 0 : i <= 9; j ? i-- : i++) {\n    const layerSquares = R.take(i, squaresInZigZagOrder);\n    squaresInZigZagOrder = R.drop(i, squaresInZigZagOrder);\n    R.map(square =>\n      tl.fromTo(\n        square,\n        i * 0.004,\n        { opacity: 0, x: -20, y: -20 },\n        { opacity: 1, x: 0, y: 0, ease: Power2.easeInOut }\n      )\n    )(layerSquares);\n    if (i === 9) j = true;\n  }\n};\n\nconst getAllSquaresInOrder = () => {\n  let row: number = 0,\n    col: number = 0;\n  let row_inc: boolean = false;\n\n  for (let len = 1; len <= 9; ++len) {\n    for (let i = 0; i < len; ++i) {\n      squaresInZigZagOrder.push(elementAt(row)(col));\n\n      if (i + 1 === len) break;\n\n      if (row_inc) {\n        ++row;\n        --col;\n      } else {\n        --row;\n        ++col;\n      }\n    }\n\n    if (len === 9) break;\n\n    // Update row or col valaue according\n    // to the last increment\n    if (row_inc) {\n      ++row;\n      row_inc = false;\n    } else {\n      ++col;\n      row_inc = true;\n    }\n  }\n\n  // Update the indexes of row and col variable\n  if (row === 0) {\n    if (col === 8) ++row;\n    else ++col;\n    row_inc = true;\n  } else {\n    if (row === 8) ++col;\n    else ++row;\n    row_inc = false;\n  }\n\n  for (let len, diag = 8; diag > 0; --diag) {\n    if (diag > 9) len = 9;\n    else len = diag;\n\n    for (let i = 0; i < len; ++i) {\n      squaresInZigZagOrder.push(elementAt(row)(col));\n\n      if (i + 1 === len) break;\n\n      // Update row or col value according\n      // to the last increment\n      if (row_inc) {\n        ++row;\n        --col;\n      } else {\n        ++col;\n        --row;\n      }\n    }\n\n    // Update the indexes of row and col variable\n    if (row === 0 || col === 8) {\n      if (col === 8) ++row;\n      else ++col;\n\n      row_inc = true;\n    } else if (col === 0 || row === 8) {\n      if (row === 8) ++col;\n      else ++row;\n\n      row_inc = false;\n    }\n  }\n};\n\nconst elementAt = (row: number) => (col: number): HTMLInputElement => {\n  return document.getElementById(`square-${row}-${col}`)! as HTMLInputElement;\n};\n","import React, { useState, useEffect } from \"react\";\nimport Square from \"./Square\";\nimport Controls from \"./Controls\";\nimport { clone, addIndex, map, equals } from \"ramda\";\nimport { solve, isValid } from \"../lib/solve\";\nimport animate from '../lib/animate';\nimport \"../css/Board.css\";\n\n\n\ntype Digit = \"\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\";\nconst emptyBoard: string[][] = [\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n];\nconst mapWithIndex = addIndex(map);\n\nconst Board = () => {\n  const [board, setBoard] = useState<string[][]>(emptyBoard);\n  const [errorMessage, setErrorMessage] = useState<string>(\"\");\n\n  useEffect(()=> {\n    animate();\n  },[])\n\n  const clearBoard = () => {\n    setErrorMessage(() => \"\");\n    setBoard(() => emptyBoard);\n  };\n\n  const setImportedBoard = (importedBoard: string[][]) => {\n    setErrorMessage(() => \"\");\n    setBoard(() => importedBoard);\n  };\n\n  const solveSudoku = () => {\n    switch (isValid(board)) {\n      case 1:\n        setErrorMessage(() => \"Sudoku is already full!\");\n        return;\n      case 2:\n        setErrorMessage(() => \"Sudoku is invalid! Recheck the values!\");\n        return;\n      default:\n        break;\n    }\n\n    const solvedBoard = solve(board);\n    if (equals([[]])(solvedBoard)) {\n      setErrorMessage(() => \"Sudoku cannot be solved\");\n    } else {\n      document.querySelectorAll(\".square\").forEach(element => {\n        if ((element as HTMLInputElement).value === \"\")\n          return element.classList.add(\"animate\");\n        else return element;\n      });\n      setErrorMessage(() => \"\");\n      setTimeout(() => {\n        setBoard(() => solvedBoard);\n        document\n          .querySelectorAll(\".square\")\n          .forEach(element => element.classList.remove(\"animate\"));\n      }, 500);\n    }\n  };\n\n  const setBoardEntry = row => col => value => {\n    const newBoard = clone(board);\n    newBoard[row][col] = value;\n    setBoard(() => newBoard);\n  };\n\n  return (\n    <div className=\"mainContent\">\n      <div className=\"board\">\n        <span>\n          {mapWithIndex((row: string[], rowNr: number) => (\n            <div className=\"row\" key={rowNr}>\n              {mapWithIndex((entry: string, colNr: number) => (\n                <Square\n                  coordinates={{ rowNr, colNr }}\n                  setBoardEntry={value => setBoardEntry(rowNr)(colNr)(value)}\n                  value={entry as Digit}\n                  key={colNr}\n                />\n              ))(row)}\n            </div>\n          ))(board)}\n        </span>\n      </div>\n      {errorMessage !== \"\" ? (\n        <div className=\"errorMsg\">\n          <span>\n            <i className=\"fas fa-exclamation\"></i>\n            {errorMessage}\n          </span>\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Controls\n        setImportedBoard={setImportedBoard}\n        clearBoard={clearBoard}\n        solveSudoku={solveSudoku}\n      />\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport \"./css/App.css\";\nimport Header from \"./components/Header\";\nimport BoardAndControls from \"./components/BoardAndControls\";\n\n\nconst App = () => {\n\n  \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <BoardAndControls />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}